module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) int 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) int
    
  type itermut_vec 't = 
    | IterMut_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
  type core_ptr_nonnull_nonnull 't = 
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_slice_iter_itermut 't = 
    | Core_Slice_Iter_IterMut (core_ptr_nonnull_nonnull 't) opaque_ptr (core_marker_phantomdata (borrowed 't))
    
  type itermut_itermut 't = 
    | IterMut_IterMut (core_slice_iter_itermut 't)
    
  type itermut_ghost 't = 
    | IterMut_Ghost opaque_ptr
    
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module IterMut_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.itermut_vec t) : Seq.seq t
end
module IterMut_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.itermut_vec t) : Seq.seq t
end
module IterMut_Impl0_Interface
  type t   
  use Type
  use seq.Seq
  clone export IterMut_Impl0_Model_Interface with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_vec t, type modelty = modelty,
  function model = model
end
module IterMut_Impl0
  type t   
  use Type
  use seq.Seq
  clone export IterMut_Impl0_Model with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_vec t, type modelty = modelty,
  function model = model
end
module IterMut_Impl2_Model_Interface
  type t   
  use Type
  use seq.Seq
  use prelude.Prelude
  function model (self : Type.itermut_itermut t) : Seq.seq (borrowed t)
end
module IterMut_Impl2_Model
  type t   
  use Type
  use seq.Seq
  use prelude.Prelude
  function model (self : Type.itermut_itermut t) : Seq.seq (borrowed t)
end
module IterMut_Impl2_Interface
  type t   
  use Type
  use seq.Seq
  use prelude.Prelude
  clone export IterMut_Impl2_Model_Interface with type t = t
  type modelty  = 
    Seq.seq (borrowed t)
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_itermut t, type modelty = modelty,
  function model = model
end
module IterMut_Impl2
  type t   
  use Type
  use seq.Seq
  use prelude.Prelude
  clone export IterMut_Impl2_Model with type t = t
  type modelty  = 
    Seq.seq (borrowed t)
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_itermut t, type modelty = modelty,
  function model = model
end
module IterMut_Impl1_IterMut_Interface
  type t   
  use mach.int.Int
  use seq.Seq
  use prelude.Prelude
  use Type
  clone IterMut_Impl2_Interface as Model1 with type t = t
  clone IterMut_Impl0_Interface as Model0 with type t = t
  val iter_mut (self : borrowed (Type.itermut_vec t)) : Type.itermut_itermut t
    ensures { forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i =  ^ Seq.get (Model1.model result) i }
    ensures { forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( * self)) -> Seq.get (Model0.model ( * self)) i =  * Seq.get (Model1.model result) i }
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model1.model result) && Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    
end
module IterMut_Impl1_IterMut
  type t   
  use mach.int.Int
  use seq.Seq
  use prelude.Prelude
  use Type
  clone IterMut_Impl2 as Model1 with type t = t
  clone IterMut_Impl0 as Model0 with type t = t
  val iter_mut (self : borrowed (Type.itermut_vec t)) : Type.itermut_itermut t
    ensures { forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i =  ^ Seq.get (Model1.model result) i }
    ensures { forall i : (int) . 0 <= i && i <= Seq.length (Model0.model ( * self)) -> Seq.get (Model0.model ( * self)) i =  * Seq.get (Model1.model result) i }
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model1.model result) && Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    
end
module IterMut_Impl1_Len_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone IterMut_Impl0_Interface as Model0 with type t = t
  val len (self : Type.itermut_vec t) : int
    ensures { result = Seq.length (Model0.model self) }
    
end
module IterMut_Impl1_Len
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone IterMut_Impl0 as Model0 with type t = t
  val len (self : Type.itermut_vec t) : int
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Builtins_Seq_Impl0_Tail_Interface
  type t   
  use seq.Seq
  function tail (self : Seq.seq t) : Seq.seq t
end
module CreusotContracts_Builtins_Seq_Impl0_Tail
  type t   
  use seq.Seq
  use mach.int.Int
  use seq_ext.SeqExt
  function tail (self : Seq.seq t) : Seq.seq t = 
    SeqExt.subsequence self 1 (Seq.length self)
end
module CreusotContracts_Builtins_Seq_Impl0_Get_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use Type
  function get (self : Seq.seq t) (ix : int) : Type.core_option_option t
end
module CreusotContracts_Builtins_Seq_Impl0_Get
  type t   
  use seq.Seq
  use mach.int.Int
  use Type
  function get (self : Seq.seq t) (ix : int) : Type.core_option_option t = 
    match (ix < Seq.length self) with
      | True -> Type.Core_Option_Option_Some (Seq.get self ix)
      | False -> Type.Core_Option_Option_None
      end
end
module IterMut_Impl3_Next_Interface
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Seq_Impl0_Get_Interface as Get0 with type t = borrowed t
  clone CreusotContracts_Builtins_Seq_Impl0_Tail_Interface as Tail0 with type t = borrowed t
  clone IterMut_Impl2_Interface as Model0 with type t = t
  val next (self : borrowed (Type.itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { Model0.model ( ^ self) = Tail0.tail (Model0.model ( * self)) }
    ensures { result = Get0.get (Model0.model ( * self)) 0 }
    
end
module IterMut_Impl3_Next
  type t   
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Seq_Impl0_Get as Get0 with type t = borrowed t
  clone CreusotContracts_Builtins_Seq_Impl0_Tail as Tail0 with type t = borrowed t
  clone IterMut_Impl2 as Model0 with type t = t
  val next (self : borrowed (Type.itermut_itermut t)) : Type.core_option_option (borrowed t)
    ensures { Model0.model ( ^ self) = Tail0.tail (Model0.model ( * self)) }
    ensures { result = Get0.get (Model0.model ( * self)) 0 }
    
end
module IterMut_Impl4_Model_Interface
  type t   
  use Type
  function model (self : Type.itermut_ghost t) : t
end
module IterMut_Impl4_Model
  type t   
  use Type
  function model (self : Type.itermut_ghost t) : t
end
module IterMut_Impl4_Interface
  type t   
  use Type
  clone export IterMut_Impl4_Model_Interface with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_ghost t, type modelty = modelty,
  function model = model
end
module IterMut_Impl4
  type t   
  use Type
  clone export IterMut_Impl4_Model with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.itermut_ghost t, type modelty = modelty,
  function model = model
end
module IterMut_Impl5_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone IterMut_Impl4_Interface as Model0 with type t = t
  val record (a : t) : Type.itermut_ghost t
    ensures { Model0.model result = a }
    
end
module IterMut_Impl5_Record
  type t   
  use prelude.Prelude
  use Type
  clone IterMut_Impl4 as Model0 with type t = t
  val record (a : t) : Type.itermut_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Builtins_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Model_Model
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Model_Impl1_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1_Interface
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module IterMut_IncVec_Interface
  use mach.int.Int
  use seq.Seq
  use prelude.Prelude
  use Type
  clone IterMut_Impl0_Interface as Model0 with type t = int
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model1 with type t = Type.itermut_vec int,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  val inc_vec (v : borrowed (Type.itermut_vec int)) : ()
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model0.model ( ^ v)) -> Seq.get (Model0.model ( ^ v)) i = Seq.get (Model1.model v) i + 5 }
    ensures { Seq.length (Model0.model ( ^ v)) = Seq.length (Model1.model v) }
    
end
module IterMut_IncVec
  use mach.int.Int
  use seq.Seq
  use prelude.Prelude
  use Type
  clone IterMut_Impl2 as Model2 with type t = int
  clone IterMut_Impl0 as Model1 with type t = int
  clone CreusotContracts_Builtins_Model_Impl1 as Model3 with type t = Type.itermut_vec int,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  clone IterMut_Impl4 as Model0 with type t = borrowed (Type.itermut_vec int)
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve7 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve6 with type t = int
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve5 with type self = int
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = Type.core_option_option (borrowed int)
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = Type.itermut_itermut int
  clone CreusotContracts_Builtins_Seq_Impl0_Get as Get0 with type t = borrowed int
  clone CreusotContracts_Builtins_Seq_Impl0_Tail as Tail0 with type t = borrowed int
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve2 with type t = Type.itermut_vec int
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = Type.itermut_ghost (borrowed (Type.itermut_vec int))
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = borrowed (Type.itermut_vec int)
  clone IterMut_Impl3_Next_Interface as Next0 with type t = int, function Model0.model = Model2.model,
  function Tail0.tail = Tail0.tail, function Get0.get = Get0.get
  clone IterMut_Impl1_IterMut_Interface as IterMut0 with type t = int, function Model0.model = Model1.model,
  function Model1.model = Model2.model
  clone IterMut_Impl5_Record_Interface as Record0 with type t = borrowed (Type.itermut_vec int),
  function Model0.model = Model0.model
  let rec cfg inc_vec (v : borrowed (Type.itermut_vec int)) : ()
    ensures { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ v)) -> Seq.get (Model1.model ( ^ v)) i = Seq.get (Model3.model v) i + 5 }
    ensures { Seq.length (Model1.model ( ^ v)) = Seq.length (Model3.model v) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.itermut_vec int);
  var old_v_2 : Type.itermut_ghost (borrowed (Type.itermut_vec int));
  var _3 : borrowed (Type.itermut_vec int);
  var _4 : borrowed (Type.itermut_vec int);
  var it_5 : Type.itermut_itermut int;
  var _6 : borrowed (Type.itermut_vec int);
  var _9 : ();
  var _10 : Type.core_option_option (borrowed int);
  var _11 : borrowed (Type.itermut_itermut int);
  var _12 : int;
  var r_13 : borrowed int;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    assume { Resolve2.resolve v_1 };
    _6 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _6) };
    it_5 <- IterMut0.iter_mut _6;
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant incremented { forall i : (int) . 0 <= i && i < Seq.length (Model1.model ( ^ Model0.model old_v_2)) - Seq.length (Model2.model it_5) -> Seq.get (Model1.model ( ^ Model0.model old_v_2)) i = Seq.get (Model3.model (Model0.model old_v_2)) i + 5 };
    invariant to_come { forall i : (int) . 0 <= i && i < Seq.length (Model2.model it_5) ->  * Seq.get (Model2.model it_5) i = Seq.get (Model3.model (Model0.model old_v_2)) (i + Seq.length (Model1.model ( ^ Model0.model old_v_2)) - Seq.length (Model2.model it_5)) &&  ^ Seq.get (Model2.model it_5) i = Seq.get (Model1.model ( ^ Model0.model old_v_2)) (i + Seq.length (Model1.model ( ^ Model0.model old_v_2)) - Seq.length (Model2.model it_5)) };
    goto BB4
  }
  BB4 {
    _11 <- borrow_mut it_5;
    it_5 <-  ^ _11;
    _10 <- Next0.next _11;
    goto BB5
  }
  BB5 {
    switch (_10)
      | Type.Core_Option_Option_Some _ -> goto BB6
      | _ -> goto BB8
      end
  }
  BB6 {
    assume { Resolve5.resolve _12 };
    goto BB7
  }
  BB7 {
    assume { Resolve6.resolve r_13 };
    r_13 <- (let Type.Core_Option_Option_Some a = _10 in a);
    assume { Resolve4.resolve _10 };
    r_13 <- { r_13 with current = ( * r_13 + (5 : int)) };
    assume { Resolve6.resolve r_13 };
    _9 <- ();
    assume { Resolve7.resolve _9 };
    goto BB3
  }
  BB8 {
    assume { Resolve3.resolve it_5 };
    assume { Resolve4.resolve _10 };
    assume { Resolve5.resolve _12 };
    _0 <- ();
    return _0
  }
  
end
