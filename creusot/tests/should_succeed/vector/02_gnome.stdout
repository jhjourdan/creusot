module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type c02gnome_ghost 't = 
    | C02Gnome_Ghost opaque_ptr
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module C02Gnome_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.c02gnome_ghost t) : t
end
module C02Gnome_Impl0_Model
  type t   
  use Type
  function model (self : Type.c02gnome_ghost t) : t
end
module C02Gnome_Impl0_Interface
  type t   
  use Type
  clone export C02Gnome_Impl0_Model_Interface with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c02gnome_ghost t, type modelty = modelty,
  function model = model
end
module C02Gnome_Impl0
  type t   
  use Type
  clone export C02Gnome_Impl0_Model with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c02gnome_ghost t, type modelty = modelty,
  function model = model
end
module C02Gnome_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Impl0_Interface as Model0 with type t = t
  val record (a : t) : Type.c02gnome_ghost t
    ensures { Model0.model result = a }
    
end
module C02Gnome_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Impl0 as Model0 with type t = t
  val record (a : t) : Type.c02gnome_ghost t
    ensures { Model0.model result = a }
    
end
module C02Gnome_Ord
  type self   
  function le_log (self : self) (_2 : self) : bool
  use prelude.Prelude
  val le (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
  function trans (a : self) (b : self) (c : self) : ()
  val trans (a : self) (b : self) (c : self) : ()
    requires {le_log a b && le_log b c}
    ensures { le_log a c }
    ensures { result = trans a b c }
    
  axiom trans_spec : forall a : self, b : self, c : self . le_log a b && le_log b c -> le_log a c
end
module C02Gnome_SortedRange_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module C02Gnome_SortedRange
  type t   
  use seq.Seq
  use mach.int.Int
  clone C02Gnome_Ord as Ord0 with type self = t, axiom .
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> Ord0.le_log (Seq.get s i) (Seq.get s j)
end
module C02Gnome_Sorted_Interface
  type t   
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module C02Gnome_Sorted
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone C02Gnome_SortedRange_Interface as SortedRange0 with type t = t
  predicate sorted (s : Seq.seq t) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Interface
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model_Interface with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Builtins_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Model_Model
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Model_Impl1_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module Core_Marker_Sized
  type self   
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty = 
    Model0.model self
end
module CreusotContracts_Builtins_Model_Impl0_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {j < Seq.length (Model0.model self)}
    requires {i < Seq.length (Model0.model self)}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model1.model ( * self)) }
    ensures { forall k : (int) . 0 <= k && k <= Seq.length (Model1.model ( ^ self)) && i <> k && j <> k -> Seq.get (Model1.model ( ^ self)) k = Seq.get (Model1.model ( * self)) k }
    ensures { Seq.get (Model1.model ( ^ self)) j = Seq.get (Model1.model ( * self)) i }
    ensures { Seq.get (Model1.model ( ^ self)) i = Seq.get (Model1.model ( * self)) j }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {j < Seq.length (Model0.model self)}
    requires {i < Seq.length (Model0.model self)}
    ensures { Seq.length (Model1.model ( ^ self)) = Seq.length (Model1.model ( * self)) }
    ensures { forall k : (int) . 0 <= k && k <= Seq.length (Model1.model ( ^ self)) && i <> k && j <> k -> Seq.get (Model1.model ( ^ self)) k = Seq.get (Model1.model ( * self)) k }
    ensures { Seq.get (Model1.model ( ^ self)) j = Seq.get (Model1.model ( * self)) i }
    ensures { Seq.get (Model1.model ( ^ self)) i = Seq.get (Model1.model ( * self)) j }
    
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1_Interface
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Std1_Vec_Impl1_Index_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) ix }
    
end
module CreusotContracts_Std1_Vec_Impl1_Index
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) ix }
    
end
module C02Gnome_GnomeSort_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C02Gnome_Sorted_Interface as Sorted0 with type t = t
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = t
  val gnome_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model0.model ( * v)) }
    ensures { Sorted0.sorted (Model0.model ( ^ v)) }
    
end
module C02Gnome_GnomeSort
  type t   
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Marker_Sized as Sized0 with type self = t
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone C02Gnome_Impl0 as Model1 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone C02Gnome_Ord as Ord0 with type self = t, axiom .
  clone C02Gnome_SortedRange as SortedRange0 with type t = t, function Ord0.le_log = Ord0.le_log, val Ord0.le = Ord0.le,
  function Ord0.trans = Ord0.trans, val Ord0.trans = Ord0.trans
  clone C02Gnome_Sorted as Sorted0 with type t = t, predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0 as Model2 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1 as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model2.modelty, function Model0.model = Model2.model
  use mach.int.UInt64
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve6 with type self = t
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve5 with type t = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve4 with type self = ()
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = bool
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = Type.c02gnome_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t))
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone C02Gnome_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t),
  function Model0.model = Model1.model
  clone CreusotContracts_Builtins_Model_Impl0 as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model2.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Index_Interface as Index0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model2.model
  let rec cfg gnome_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model2.model ( * v)) }
    ensures { Sorted0.sorted (Model2.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var old_v_2 : Type.c02gnome_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t));
  var _3 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var i_5 : usize;
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.creusotcontracts_std1_vec_vec t;
  var _15 : bool;
  var _16 : bool;
  var _17 : usize;
  var _18 : bool;
  var _19 : t;
  var _20 : t;
  var _21 : Type.creusotcontracts_std1_vec_vec t;
  var _22 : usize;
  var _23 : usize;
  var _24 : t;
  var _25 : t;
  var _26 : Type.creusotcontracts_std1_vec_vec t;
  var _27 : usize;
  var _28 : ();
  var _29 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _30 : usize;
  var _31 : usize;
  var _32 : usize;
  var _33 : ();
  var _34 : ();
  var _35 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    i_5 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant sorted { SortedRange0.sorted_range (Model0.model v_1) 0 i_5 };
    invariant proph_const {  ^ v_1 =  ^ Model1.model old_v_2 };
    invariant in_len { i_5 <= Seq.length (Model2.model ( * v_1)) };
    invariant permutation { PermutationOf0.permutation_of (Model2.model ( * v_1)) (Model2.model ( * Model1.model old_v_2)) };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _12 };
    _12 <- i_5;
    _14 <-  * v_1;
    _13 <- Len0.len _14;
    goto BB4
  }
  BB4 {
    _11 <- _12 < _13;
    switch (_11)
      | False -> goto BB16
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve3.resolve _11 };
    assume { Resolve2.resolve _17 };
    _17 <- i_5;
    _16 <- _17 = (0 : usize);
    switch (_16)
      | False -> goto BB7
      | True -> goto BB6
      | _ -> goto BB6
      end
  }
  BB6 {
    assume { Resolve3.resolve _16 };
    _15 <- true;
    goto BB8
  }
  BB7 {
    assume { Resolve3.resolve _16 };
    _21 <-  * v_1;
    assume { Resolve2.resolve _23 };
    _23 <- i_5;
    _22 <- _23 - (1 : usize);
    _20 <- Index0.index _21 _22;
    goto BB9
  }
  BB8 {
    switch (_15)
      | False -> goto BB13
      | True -> goto BB12
      | _ -> goto BB12
      end
  }
  BB9 {
    _19 <- _20;
    assume { Resolve6.resolve _20 };
    _26 <-  * v_1;
    assume { Resolve2.resolve _27 };
    _27 <- i_5;
    _25 <- Index0.index _26 _27;
    goto BB10
  }
  BB10 {
    _24 <- _25;
    assume { Resolve6.resolve _25 };
    _18 <- Ord0.le _19 _24;
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve _15 };
    _15 <- _18;
    goto BB8
  }
  BB12 {
    assume { Resolve3.resolve _15 };
    i_5 <- i_5 + (1 : usize);
    _10 <- ();
    assume { Resolve4.resolve _10 };
    goto BB15
  }
  BB13 {
    assume { Resolve3.resolve _15 };
    assume { Resolve2.resolve _31 };
    _31 <- i_5;
    _30 <- _31 - (1 : usize);
    assume { Resolve2.resolve _32 };
    _32 <- i_5;
    _29 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _29) };
    _28 <- Swap0.swap _29 _30 _32;
    goto BB14
  }
  BB14 {
    assume { Resolve5.resolve _29 };
    assume { Resolve2.resolve _30 };
    assume { Resolve2.resolve _32 };
    i_5 <- i_5 - (1 : usize);
    _10 <- ();
    assume { Resolve4.resolve _10 };
    goto BB15
  }
  BB15 {
    goto BB2
  }
  BB16 {
    assume { Resolve5.resolve v_1 };
    assume { Resolve2.resolve i_5 };
    assume { Resolve3.resolve _11 };
    _0 <- ();
    return _0
  }
  
end
